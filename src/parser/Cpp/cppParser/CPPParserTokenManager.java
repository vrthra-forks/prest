/* Generated By:JavaCC: Do not edit this line. CPPParserTokenManager.java */
//package net.sourceforge.pmd.cpd.cppast;
package parser.Cpp.cppParser;

public class CPPParserTokenManager implements CPPParserConstants {
	public static java.io.PrintStream debugStream = System.out;

	public static void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private static final int jjStopStringLiteralDfa_0(int pos, long active0,
			long active1, long active2) {
		switch (pos) {
		case 0:
			if ((active1 & 0xffffffffffffeL) != 0L || (active2 & 0x20L) != 0L) {
				jjmatchedKind = 132;
				return 33;
			}
			if ((active0 & 0xa000000008000000L) != 0L)
				return 1;
			return -1;
		case 1:
			if ((active1 & 0x80c00L) != 0L)
				return 33;
			if ((active1 & 0xffffffff7f3feL) != 0L || (active2 & 0x20L) != 0L) {
				if (jjmatchedPos != 1) {
					jjmatchedKind = 132;
					jjmatchedPos = 1;
				}
				return 33;
			}
			return -1;
		case 2:
			if ((active1 & 0x8000a10000L) != 0L)
				return 33;
			if ((active1 & 0xfff7fff56fbfeL) != 0L || (active2 & 0x20L) != 0L) {
				jjmatchedKind = 132;
				jjmatchedPos = 2;
				return 33;
			}
			return -1;
		case 3:
			if ((active1 & 0xdcf3fff12cbd4L) != 0L || (active2 & 0x20L) != 0L) {
				jjmatchedKind = 132;
				jjmatchedPos = 3;
				return 33;
			}
			if ((active1 & 0x230400044302aL) != 0L)
				return 33;
			return -1;
		case 4:
			if ((active1 & 0x14d37bf124b80L) != 0L || (active2 & 0x20L) != 0L) {
				jjmatchedKind = 132;
				jjmatchedPos = 4;
				return 33;
			}
			if ((active1 & 0xc820840008054L) != 0L)
				return 33;
			return -1;
		case 5:
			if ((active1 & 0x17a4124a00L) != 0L)
				return 33;
			if ((active1 & 0x14d201b000180L) != 0L || (active2 & 0x20L) != 0L) {
				jjmatchedKind = 132;
				jjmatchedPos = 5;
				return 33;
			}
			return -1;
		case 6:
			if ((active1 & 0x90001000100L) != 0L)
				return 33;
			if ((active1 & 0x144201a000080L) != 0L || (active2 & 0x20L) != 0L) {
				jjmatchedKind = 132;
				jjmatchedPos = 6;
				return 33;
			}
			return -1;
		case 7:
			if ((active1 & 0xa000000L) != 0L) {
				jjmatchedKind = 132;
				jjmatchedPos = 7;
				return 33;
			}
			if ((active1 & 0x1442010000080L) != 0L)
				return 33;
			return -1;
		case 8:
			if ((active1 & 0x2000000L) != 0L)
				return 33;
			if ((active1 & 0x8000000L) != 0L) {
				jjmatchedKind = 132;
				jjmatchedPos = 8;
				return 33;
			}
			return -1;
		default:
			return -1;
		}
	}

	private static final int jjStartNfa_0(int pos, long active0, long active1,
			long active2) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1,
				active2), pos + 1);
	}

	static private final int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	static private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	static private final int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 10:
			return jjStopAtPos(0, 4);
		case 13:
			return jjMoveStringLiteralDfa1_0(0x8L, 0x0L, 0x0L);
		case 33:
			jjmatchedKind = 60;
			return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L, 0x0L);
		case 35:
			return jjStopAtPos(0, 7);
		case 37:
			jjmatchedKind = 56;
			return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x0L);
		case 38:
			jjmatchedKind = 43;
			return jjMoveStringLiteralDfa1_0(0x11000000000L, 0x0L, 0x0L);
		case 40:
			return jjStopAtPos(0, 20);
		case 41:
			return jjStopAtPos(0, 21);
		case 42:
			jjmatchedKind = 54;
			return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x0L);
		case 43:
			jjmatchedKind = 52;
			return jjMoveStringLiteralDfa1_0(0x200000100000000L, 0x0L, 0x0L);
		case 44:
			return jjStopAtPos(0, 25);
		case 45:
			jjmatchedKind = 53;
			return jjMoveStringLiteralDfa1_0(0x4400000200000000L, 0x1L, 0x0L);
		case 46:
			jjmatchedKind = 61;
			return jjMoveStringLiteralDfa1_0(0x8000000008000000L, 0x0L, 0x0L);
		case 47:
			jjmatchedKind = 55;
			return jjMoveStringLiteralDfa1_0(0x40000060L, 0x0L, 0x0L);
		case 58:
			jjmatchedKind = 23;
			return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L, 0x0L);
		case 59:
			return jjStopAtPos(0, 24);
		case 60:
			jjmatchedKind = 46;
			return jjMoveStringLiteralDfa1_0(0x5000400000000L, 0x0L, 0x0L);
		case 61:
			jjmatchedKind = 28;
			return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L, 0x0L);
		case 62:
			jjmatchedKind = 47;
			return jjMoveStringLiteralDfa1_0(0xa000800000000L, 0x0L, 0x0L);
		case 63:
			return jjStopAtPos(0, 26);
		case 91:
			return jjStopAtPos(0, 18);
		case 93:
			return jjStopAtPos(0, 19);
		case 94:
			jjmatchedKind = 42;
			return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L, 0x0L);
		case 97:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x0L);
		case 98:// b
			return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000004L, 0x0L);
		case 99:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000f8L, 0x0L);
		case 100:
			return jjMoveStringLiteralDfa1_0(0x0L, 0xf00L, 0x0L);
		case 101:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x7000L, 0x0L);
		case 102:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000038000L, 0x20L);
		case 103:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L, 0x0L);
		case 105:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x380000L, 0x0L);
		case 108:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L, 0x0L);
		case 110:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L, 0x0L);
		case 111:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000L, 0x0L);
		case 112:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x7000000L, 0x0L);
		case 114:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x38000000L, 0x0L);
		case 115:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x17c0000000L, 0x0L);
		case 116:
			return jjMoveStringLiteralDfa1_0(0x0L, 0xa01e000000000L, 0x0L);
		case 117:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x60000000000L, 0x0L);
		case 118:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x680000000000L, 0x0L);
		case 119:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L, 0x0L);
		case 123:
			return jjStopAtPos(0, 16);
		case 124:
			jjmatchedKind = 41;
			return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x0L, 0x0L);
		case 125:
			return jjStopAtPos(0, 17);
		case 126:
			return jjStopAtPos(0, 59);
		default:
			return jjMoveNfa_0(32, 0);
		}
	}

	static private final int jjMoveStringLiteralDfa1_0(long active0,
			long active1, long active2) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0, active1, active2);
			return 1;
		}
		switch (curChar) {
		case 10:
			if ((active0 & 0x8L) != 0L)
				return jjStopAtPos(1, 3);
			break;
		case 38:
			if ((active0 & 0x10000000000L) != 0L)
				return jjStopAtPos(1, 40);
			break;
		case 42:
			if ((active0 & 0x40L) != 0L)
				return jjStopAtPos(1, 6);
			else if ((active0 & 0x8000000000000000L) != 0L)
				return jjStopAtPos(1, 63);
			break;
		case 43:
			if ((active0 & 0x200000000000000L) != 0L)
				return jjStopAtPos(1, 57);
			break;
		case 45:
			if ((active0 & 0x400000000000000L) != 0L)
				return jjStopAtPos(1, 58);
			break;
		case 46:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L,
					active2, 0L);
		case 47:
			if ((active0 & 0x20L) != 0L)
				return jjStopAtPos(1, 5);
			break;
		case 58:
			if ((active0 & 0x400000L) != 0L)
				return jjStopAtPos(1, 22);
			break;
		case 60:
			if ((active0 & 0x4000000000000L) != 0L) {
				jjmatchedKind = 50;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1,
					0L, active2, 0L);
		case 61:
			if ((active0 & 0x20000000L) != 0L)
				return jjStopAtPos(1, 29);
			else if ((active0 & 0x40000000L) != 0L)
				return jjStopAtPos(1, 30);
			else if ((active0 & 0x80000000L) != 0L)
				return jjStopAtPos(1, 31);
			else if ((active0 & 0x100000000L) != 0L)
				return jjStopAtPos(1, 32);
			else if ((active0 & 0x200000000L) != 0L)
				return jjStopAtPos(1, 33);
			else if ((active0 & 0x1000000000L) != 0L)
				return jjStopAtPos(1, 36);
			else if ((active0 & 0x2000000000L) != 0L)
				return jjStopAtPos(1, 37);
			else if ((active0 & 0x4000000000L) != 0L)
				return jjStopAtPos(1, 38);
			else if ((active0 & 0x100000000000L) != 0L)
				return jjStopAtPos(1, 44);
			else if ((active0 & 0x200000000000L) != 0L)
				return jjStopAtPos(1, 45);
			else if ((active0 & 0x1000000000000L) != 0L)
				return jjStopAtPos(1, 48);
			else if ((active0 & 0x2000000000000L) != 0L)
				return jjStopAtPos(1, 49);
			break;
		case 62:
			if ((active0 & 0x8000000000000L) != 0L) {
				jjmatchedKind = 51;
				jjmatchedPos = 1;
			} else if ((active0 & 0x4000000000000000L) != 0L) {
				jjmatchedKind = 62;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1,
					0x1L, active2, 0L);
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x4000000000018L, active2, 0L);
		case 101:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x2038800300L, active2, 0L);
		case 102:
			if ((active1 & 0x80000L) != 0L)
				return jjStartNfaWithStates_0(1, 83, 33);
			break;
		case 104:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x8804040000020L, active2, 0L);
		case 105:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x80180000000L, active2, 0x20L);
		case 108:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x800009000L, active2, 0L);
		case 110:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x60000302000L, active2, 0L);
		case 111:// o
			if ((active1 & 0x400L) != 0L) {
				jjmatchedKind = 74;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x7000004508c0L, active2, 0L);
		case 112:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x1000000000000L, active2, 0L);
		case 114:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x2008003020004L, active2, 0L);
		case 116:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x600000000L, active2, 0L);
		case 117:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000002L,
					active2, 0L);
		case 119:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x1000000000L, active2, 0L);
		case 120:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L,
					active2, 0L);
		case 121:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x10000000000L, active2, 0L);
		case 124:
			if ((active0 & 0x8000000000L) != 0L)
				return jjStopAtPos(1, 39);
			break;
		default:
			break;
		}
		return jjStartNfa_0(0, active0, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa2_0(long old0, long active0,
			long old1, long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
			return jjStartNfa_0(0, old0, old1, old2);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0, active1, active2);
			return 2;
		}
		switch (curChar) {
		case 42:
			if ((active1 & 0x1L) != 0L)
				return jjStopAtPos(2, 64);
			break;
		case 46:
			if ((active0 & 0x8000000L) != 0L)
				return jjStopAtPos(2, 27);
			break;
		case 61:
			if ((active0 & 0x400000000L) != 0L)
				return jjStopAtPos(2, 34);
			else if ((active0 & 0x800000000L) != 0L)
				return jjStopAtPos(2, 35);
			break;
		case 97:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0xa00000020L, active2, 0L);
		case 98:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000L,
					active2, 0L);
		case 100:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L,
					active2, 0L);
		case 101:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x1000000000004L, active2, 0L);
		case 102:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L,
					active2, 0L);
		case 103:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x90000000L,
					active2, 0L);
		case 105:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0xa25001020000L, active2, 0L);
		case 108:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x4400000100200L, active2, 0L);
		case 109:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x2000000000L, active2, 0L);
		case 110:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000c0L,
					active2, 0x20L);
		case 111:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x100042008000L, active2, 0L);
		case 112:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x10000000000L, active2, 0L);
		case 114:
			if ((active1 & 0x10000L) != 0L)
				return jjStartNfaWithStates_0(2, 80, 33);
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x8080400000000L, active2, 0L);
		case 115:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x40000001008L, active2, 0L);
		case 116:
			if ((active1 & 0x200000L) != 0L)
				return jjStartNfaWithStates_0(2, 85, 33);
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20044012L,
					active2, 0L);
		case 117:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x2000000002800L, active2, 0L);
		case 119:
			if ((active1 & 0x800000L) != 0L)
				return jjStartNfaWithStates_0(2, 87, 33);
			break;
		case 121:
			if ((active1 & 0x8000000000L) != 0L)
				return jjStartNfaWithStates_0(2, 103, 33);
			break;
		case 122:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x100000000L, active2, 0L);
		default:
			break;
		}
		return jjStartNfa_0(1, active0, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa3_0(long old0, long active0,
			long old1, long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
			return jjStartNfa_0(1, old0, old1, old2);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, 0L, active1, active2);
			return 3;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa4_0(active1, 0x400000008104L, active2,
					0x20L);
		case 98:
			return jjMoveStringLiteralDfa4_0(active1, 0x800L, active2, 0L);
		case 99:
			return jjMoveStringLiteralDfa4_0(active1, 0x10L, active2, 0L);
		case 100:
			if ((active1 & 0x200000000000L) != 0L)
				return jjStartNfaWithStates_0(3, 109, 33);
			break;
		case 101:
			if ((active1 & 0x8L) != 0L)
				return jjStartNfaWithStates_0(3, 67, 33);
			else if ((active1 & 0x1000L) != 0L)
				return jjStartNfaWithStates_0(3, 76, 33);
			else if ((active1 & 0x2000000000000L) != 0L)
				return jjStartNfaWithStates_0(3, 113, 33);
			return jjMoveStringLiteralDfa4_0(active1, 0x10108024200L, active2,
					0L);
		case 103:
			if ((active1 & 0x400000L) != 0L)
				return jjStartNfaWithStates_0(3, 86, 33);
			break;
		case 105:
			return jjMoveStringLiteralDfa4_0(active1, 0x40010100000L, active2,
					0L);
		case 108:// l
			if ((active1 & 0x100000000000L) != 0L)
				return jjStartNfaWithStates_0(3, 108, 33);
			return jjMoveStringLiteralDfa4_0(active1, 0x800004000000L, active2,
					0L);
		case 109:
			if ((active1 & 0x2000L) != 0L)
				return jjStartNfaWithStates_0(3, 77, 33);
			break;
		case 110:
			return jjMoveStringLiteralDfa4_0(active1, 0x80000000L, active2, 0L);
		case 111:
			if ((active1 & 0x2L) != 0L)
				return jjStartNfaWithStates_0(3, 65, 33);
			else if ((active1 & 0x40000L) != 0L)
				return jjStartNfaWithStates_0(3, 82, 33);
			return jjMoveStringLiteralDfa4_0(active1, 0x8020000000000L,
					active2, 0L);
		case 112:
			return jjMoveStringLiteralDfa4_0(active1, 0x2000000000L, active2,
					0L);
		case 114:
			if ((active1 & 0x20L) != 0L)
				return jjStartNfaWithStates_0(3, 69, 33);
			return jjMoveStringLiteralDfa4_0(active1, 0x1000040000000L,
					active2, 0L);
		case 115:
			if ((active1 & 0x4000000000L) != 0L)
				return jjStartNfaWithStates_0(3, 102, 33);
			return jjMoveStringLiteralDfa4_0(active1, 0x4000800000040L,
					active2, 0L);
		case 116:
			return jjMoveStringLiteralDfa4_0(active1, 0x81202000080L, active2,
					0L);
		case 117:
			return jjMoveStringLiteralDfa4_0(active1, 0x420000000L, active2, 0L);
		case 118:
			return jjMoveStringLiteralDfa4_0(active1, 0x1000000L, active2, 0L);
		default:
			break;
		}
		return jjStartNfa_0(2, 0L, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa4_0(long old1, long active1,
			long old2, long active2) {
		if (((active1 &= old1) | (active2 &= old2)) == 0L)
			return jjStartNfa_0(2, 0L, old1, old2);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, 0L, active1, active2);
			return 4;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa5_0(active1, 0x1000001000000L,
					active2, 0L);
		case 99:
			return jjMoveStringLiteralDfa5_0(active1, 0x1408000000L, active2,
					0L);
		case 100:
			return jjMoveStringLiteralDfa5_0(active1, 0x10000000000L, active2,
					0L);
		case 101:
			if ((active1 & 0x800000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 111, 33);
			else if ((active1 & 0x4000000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 114, 33);
			return jjMoveStringLiteralDfa5_0(active1, 0x82000000L, active2, 0L);
		case 103:
			return jjMoveStringLiteralDfa5_0(active1, 0x40000000000L, active2,
					0L);
		case 104:
			if ((active1 & 0x10L) != 0L)
				return jjStartNfaWithStates_0(4, 68, 33);
			break;
		case 105:
			return jjMoveStringLiteralDfa5_0(active1, 0x204000080L, active2, 0L);
		case 107:
			if ((active1 & 0x4L) != 0L)
				return jjStartNfaWithStates_0(4, 66, 33);
			break;
		case 108:
			return jjMoveStringLiteralDfa5_0(active1, 0x2000000800L, active2,
					0x20L);
		case 110:
			if ((active1 & 0x20000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 105, 33);
			return jjMoveStringLiteralDfa5_0(active1, 0x120000L, active2, 0L);
		case 111:
			return jjMoveStringLiteralDfa5_0(active1, 0x100000000L, active2, 0L);
		case 114:
			return jjMoveStringLiteralDfa5_0(active1, 0x20004000L, active2, 0L);
		case 115:
			if ((active1 & 0x800000000L) != 0L)
				return jjStartNfaWithStates_0(4, 99, 33);
			return jjMoveStringLiteralDfa5_0(active1, 0x10000000L, active2, 0L);
		case 116:
			if ((active1 & 0x40L) != 0L)
				return jjStartNfaWithStates_0(4, 70, 33);
			else if ((active1 & 0x8000L) != 0L)
				return jjStartNfaWithStates_0(4, 79, 33);
			else if ((active1 & 0x40000000L) != 0L)
				return jjStartNfaWithStates_0(4, 94, 33);
			return jjMoveStringLiteralDfa5_0(active1, 0x400000000200L, active2,
					0L);
		case 117:
			return jjMoveStringLiteralDfa5_0(active1, 0x80000000100L, active2,
					0L);
		case 119:
			if ((active1 & 0x8000000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 115, 33);
			break;
		default:
			break;
		}
		return jjStartNfa_0(3, 0L, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa5_0(long old1, long active1,
			long old2, long active2) {
		if (((active1 &= old1) | (active2 &= old2)) == 0L)
			return jjStartNfa_0(3, 0L, old1, old2);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, 0L, active1, active2);
			return 5;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa6_0(active1, 0x82000000000L, active2,
					0L);
		case 99:
			if ((active1 & 0x4000000L) != 0L)
				return jjStartNfaWithStates_0(5, 90, 33);
			else if ((active1 & 0x200000000L) != 0L)
				return jjStartNfaWithStates_0(5, 97, 33);
			return jjMoveStringLiteralDfa6_0(active1, 0x2000000L, active2, 0L);
		case 100:
			if ((active1 & 0x20000L) != 0L)
				return jjStartNfaWithStates_0(5, 81, 33);
			else if ((active1 & 0x80000000L) != 0L)
				return jjStartNfaWithStates_0(5, 95, 33);
			break;
		case 101:
			if ((active1 & 0x200L) != 0L)
				return jjStartNfaWithStates_0(5, 73, 33);
			else if ((active1 & 0x800L) != 0L)
				return jjStartNfaWithStates_0(5, 75, 33);
			else if ((active1 & 0x100000L) != 0L)
				return jjStartNfaWithStates_0(5, 84, 33);
			return jjMoveStringLiteralDfa6_0(active1, 0x10000000000L, active2,
					0L);
		case 102:
			if ((active1 & 0x100000000L) != 0L)
				return jjStartNfaWithStates_0(5, 96, 33);
			break;
		case 104:
			if ((active1 & 0x1000000000L) != 0L)
				return jjStartNfaWithStates_0(5, 100, 33);
			break;
		case 105:
			return jjMoveStringLiteralDfa6_0(active1, 0x400000000000L, active2,
					0L);
		case 108:
			return jjMoveStringLiteralDfa6_0(active1, 0x8000100L, active2,
					0x20L);
		case 110:
			if ((active1 & 0x4000L) != 0L)
				return jjStartNfaWithStates_0(5, 78, 33);
			else if ((active1 & 0x20000000L) != 0L)
				return jjStartNfaWithStates_0(5, 93, 33);
			return jjMoveStringLiteralDfa6_0(active1, 0x40000000080L, active2,
					0L);
		case 116:
			if ((active1 & 0x400000000L) != 0L)
				return jjStartNfaWithStates_0(5, 98, 33);
			return jjMoveStringLiteralDfa6_0(active1, 0x1000011000000L,
					active2, 0L);
		default:
			break;
		}
		return jjStartNfa_0(4, 0L, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa6_0(long old1, long active1,
			long old2, long active2) {
		if (((active1 &= old1) | (active2 &= old2)) == 0L)
			return jjStartNfa_0(4, 0L, old1, old2);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, 0L, active1, active2);
			return 6;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa7_0(active1, 0x8000000L, active2, 0L);
		case 101:
			if ((active1 & 0x1000000L) != 0L)
				return jjStartNfaWithStates_0(6, 88, 33);
			return jjMoveStringLiteralDfa7_0(active1, 0x40010000000L, active2,
					0L);
		case 102:
			if ((active1 & 0x10000000000L) != 0L)
				return jjStartNfaWithStates_0(6, 104, 33);
			break;
		case 108:
			if ((active1 & 0x80000000000L) != 0L)
				return jjStartNfaWithStates_0(6, 107, 33);
			return jjMoveStringLiteralDfa7_0(active1, 0x400000000000L, active2,
					0L);
		case 111:
			return jjMoveStringLiteralDfa7_0(active1, 0x1000000000000L,
					active2, 0L);
		case 116:
			if ((active1 & 0x100L) != 0L)
				return jjStartNfaWithStates_0(6, 72, 33);
			return jjMoveStringLiteralDfa7_0(active1, 0x2002000000L, active2,
					0L);
		case 117:
			return jjMoveStringLiteralDfa7_0(active1, 0x80L, active2, 0L);
		case 121:
			if ((active2 & 0x20L) != 0L)
				return jjStartNfaWithStates_0(6, 132, 33);
			break;
		default:
			break;
		}
		return jjStartNfa_0(5, 0L, active1, active2);
	}

	static private final int jjMoveStringLiteralDfa7_0(long old1, long active1,
			long old2, long active2) {
		if (((active1 &= old1) | (active2 &= old2)) == 0L)
			return jjStartNfa_0(5, 0L, old1, old2);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, 0L, active1, 0L);
			return 7;
		}
		switch (curChar) {
		case 100:
			if ((active1 & 0x40000000000L) != 0L)
				return jjStartNfaWithStates_0(7, 106, 33);
			break;
		case 101:
			if ((active1 & 0x80L) != 0L)
				return jjStartNfaWithStates_0(7, 71, 33);
			else if ((active1 & 0x2000000000L) != 0L)
				return jjStartNfaWithStates_0(7, 101, 33);
			else if ((active1 & 0x400000000000L) != 0L)
				return jjStartNfaWithStates_0(7, 110, 33);
			return jjMoveStringLiteralDfa8_0(active1, 0x2000000L);
		case 114:
			if ((active1 & 0x10000000L) != 0L)
				return jjStartNfaWithStates_0(7, 92, 33);
			else if ((active1 & 0x1000000000000L) != 0L)
				return jjStartNfaWithStates_0(7, 112, 33);
			return jjMoveStringLiteralDfa8_0(active1, 0x8000000L);
		default:
			break;
		}
		return jjStartNfa_0(6, 0L, active1, 0L);
	}

	static private final int jjMoveStringLiteralDfa8_0(long old1, long active1) {
		if (((active1 &= old1)) == 0L)
			return jjStartNfa_0(6, 0L, old1, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, 0L, active1, 0L);
			return 8;
		}
		switch (curChar) {
		case 100:
			if ((active1 & 0x2000000L) != 0L)
				return jjStartNfaWithStates_0(8, 89, 33);
			break;
		case 101:
			return jjMoveStringLiteralDfa9_0(active1, 0x8000000L);
		default:
			break;
		}
		return jjStartNfa_0(7, 0L, active1, 0L);
	}

	static private final int jjMoveStringLiteralDfa9_0(long old1, long active1) {
		if (((active1 &= old1)) == 0L)
			return jjStartNfa_0(7, 0L, old1, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, 0L, active1, 0L);
			return 9;
		}
		switch (curChar) {
		case 100:
			if ((active1 & 0x8000000L) != 0L)
				return jjStartNfaWithStates_0(9, 91, 33);
			break;
		default:
			break;
		}
		return jjStartNfa_0(8, 0L, active1, 0L);
	}

	static private final void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	static private final void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	static private final void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	static private final void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

	static private final void jjCheckNAddStates(int start) {
		jjCheckNAdd(jjnextStates[start]);
		jjCheckNAdd(jjnextStates[start + 1]);
	}

	static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL,
			0xffffffffffffffffL };

	static private final int jjMoveNfa_0(int startState, int curPos) {
		int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 82;
		int i = 1;
		jjstateSet[0] = startState;
		int j, kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 32:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(0, 5);
						else if (curChar == 34)
							jjCheckNAddStates(6, 8);
						else if (curChar == 39)
							jjAddStates(9, 10);
						else if (curChar == 46)
							jjCheckNAdd(1);
						if ((0x3fe000000000000L & l) != 0L) {
							if (kind > 120)
								kind = 120;
							jjCheckNAddStates(11, 18);
						} else if (curChar == 48)
							jjAddStates(19, 22);
						if (curChar == 48) {
							if (kind > 116)
								kind = 116;
							jjCheckNAddStates(23, 30);
						}
						break;
					case 0:
						if (curChar == 46)
							jjCheckNAdd(1);
						break;
					case 1:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 128)
							kind = 128;
						jjCheckNAddStates(31, 33);
						break;
					case 3:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(4);
						break;
					case 4:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 128)
							kind = 128;
						jjCheckNAddTwoStates(4, 5);
						break;
					case 6:
						if (curChar == 39)
							jjAddStates(9, 10);
						break;
					case 7:
						if ((0xffffff7fffffdbffL & l) != 0L)
							jjCheckNAdd(8);
						break;
					case 8:
						if (curChar == 39 && kind > 130)
							kind = 130;
						break;
					case 10:
						if ((0x8000008400000000L & l) != 0L)
							jjCheckNAdd(8);
						break;
					case 11:
						if (curChar == 48)
							jjCheckNAddTwoStates(12, 8);
						break;
					case 12:
						if ((0xff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(12, 8);
						break;
					case 13:
						if ((0x3fe000000000000L & l) != 0L)
							jjCheckNAddTwoStates(14, 8);
						break;
					case 14:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(14, 8);
						break;
					case 15:
						if (curChar == 48)
							jjAddStates(34, 35);
						break;
					case 17:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(17, 8);
						break;
					case 19:
						if (curChar == 34)
							jjCheckNAddStates(6, 8);
						break;
					case 20:
						if ((0xfffffffbffffdbffL & l) != 0L)
							jjCheckNAddStates(6, 8);
						break;
					case 22:
						if ((0x8000008400000400L & l) != 0L)
							jjCheckNAddStates(6, 8);
						break;
					case 23:
						if (curChar == 34 && kind > 131)
							kind = 131;
						break;
					case 24:
						if (curChar == 48)
							jjCheckNAddStates(36, 39);
						break;
					case 25:
						if ((0xff000000000000L & l) != 0L)
							jjCheckNAddStates(36, 39);
						break;
					case 26:
						if ((0x3fe000000000000L & l) != 0L)
							jjCheckNAddStates(40, 43);
						break;
					case 27:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(40, 43);
						break;
					case 28:
						if (curChar == 48)
							jjAddStates(44, 45);
						break;
					case 30:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(46, 49);
						break;
					case 33:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 132)
							kind = 132;
						jjstateSet[jjnewStateCnt++] = 33;
						break;
					case 34:
						if (curChar != 48)
							break;
						if (kind > 116)
							kind = 116;
						jjCheckNAddStates(23, 30);
						break;
					case 35:
						if ((0xff000000000000L & l) == 0L)
							break;
						if (kind > 116)
							kind = 116;
						jjCheckNAdd(35);
						break;
					case 36:
						if ((0xff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(36, 37);
						break;
					case 38:
						if ((0xff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(38, 39);
						break;
					case 40:
						if ((0xff000000000000L & l) != 0L)
							jjCheckNAddStates(50, 52);
						break;
					case 45:
						if ((0x3fe000000000000L & l) == 0L)
							break;
						if (kind > 120)
							kind = 120;
						jjCheckNAddStates(11, 18);
						break;
					case 46:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 120)
							kind = 120;
						jjCheckNAdd(46);
						break;
					case 47:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(47, 48);
						break;
					case 49:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(49, 50);
						break;
					case 51:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(53, 55);
						break;
					case 56:
						if (curChar == 48)
							jjAddStates(19, 22);
						break;
					case 58:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 124)
							kind = 124;
						jjstateSet[jjnewStateCnt++] = 58;
						break;
					case 60:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 125)
							kind = 125;
						jjAddStates(56, 57);
						break;
					case 63:
						if ((0x3ff000000000000L & l) != 0L)
							jjAddStates(58, 59);
						break;
					case 66:
						if ((0x3ff000000000000L & l) != 0L)
							jjAddStates(60, 62);
						break;
					case 71:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(0, 5);
						break;
					case 72:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(72, 73);
						break;
					case 73:
						if (curChar != 46)
							break;
						if (kind > 128)
							kind = 128;
						jjCheckNAddStates(63, 65);
						break;
					case 74:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 128)
							kind = 128;
						jjCheckNAddStates(63, 65);
						break;
					case 75:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(75, 0);
						break;
					case 76:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(76, 77);
						break;
					case 78:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(79);
						break;
					case 79:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 129)
							kind = 129;
						jjCheckNAddTwoStates(79, 80);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 32:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 132)
								kind = 132;
							jjCheckNAdd(33);
						}
						if (curChar == 76)
							jjAddStates(66, 67);
						break;
					case 2:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(68, 69);
						break;
					case 5:
						if ((0x104000001040L & l) != 0L && kind > 128)
							kind = 128;
						break;
					case 7:
						if ((0xffffffffefffffffL & l) != 0L)
							jjCheckNAdd(8);
						break;
					case 9:
						if (curChar == 92)
							jjAddStates(70, 73);
						break;
					case 10:
						if ((0x54404610000000L & l) != 0L)
							jjCheckNAdd(8);
						break;
					case 16:
						if (curChar == 120)
							jjCheckNAdd(17);
						break;
					case 17:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddTwoStates(17, 8);
						break;
					case 18:
						if (curChar == 88)
							jjCheckNAdd(17);
						break;
					case 20:
						if ((0xffffffffefffffffL & l) != 0L)
							jjCheckNAddStates(6, 8);
						break;
					case 21:
						if (curChar == 92)
							jjAddStates(74, 77);
						break;
					case 22:
						if ((0x54404610000000L & l) != 0L)
							jjCheckNAddStates(6, 8);
						break;
					case 29:
						if (curChar == 120)
							jjCheckNAdd(30);
						break;
					case 30:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(46, 49);
						break;
					case 31:
						if (curChar == 88)
							jjCheckNAdd(30);
						break;
					case 33:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 132)
							kind = 132;
						jjCheckNAdd(33);
						break;
					case 37:
						if ((0x100000001000L & l) != 0L && kind > 117)
							kind = 117;
						break;
					case 39:
						if ((0x20000000200000L & l) != 0L && kind > 118)
							kind = 118;
						break;
					case 41:
						if ((0x100000001000L & l) != 0L && kind > 119)
							kind = 119;
						break;
					case 42:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 41;
						break;
					case 43:
						if ((0x20000000200000L & l) != 0L && kind > 119)
							kind = 119;
						break;
					case 44:
						if ((0x100000001000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 43;
						break;
					case 48:
						if ((0x20100000201000L & l) != 0L && kind > 121)
							kind = 121;
						break;
					case 50:
						if ((0x20000000200000L & l) != 0L && kind > 122)
							kind = 122;
						break;
					case 52:
						if ((0x100000001000L & l) != 0L && kind > 123)
							kind = 123;
						break;
					case 53:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 52;
						break;
					case 54:
						if ((0x20000000200000L & l) != 0L && kind > 123)
							kind = 123;
						break;
					case 55:
						if ((0x100000001000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 54;
						break;
					case 57:
						if ((0x100000001000000L & l) != 0L)
							jjCheckNAdd(58);
						break;
					case 58:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 124)
							kind = 124;
						jjCheckNAdd(58);
						break;
					case 59:
						if ((0x100000001000000L & l) != 0L)
							jjCheckNAdd(60);
						break;
					case 60:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 125)
							kind = 125;
						jjCheckNAddTwoStates(60, 61);
						break;
					case 61:
						if ((0x20100000201000L & l) != 0L && kind > 125)
							kind = 125;
						break;
					case 62:
						if ((0x100000001000000L & l) != 0L)
							jjCheckNAdd(63);
						break;
					case 63:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddTwoStates(63, 64);
						break;
					case 64:
						if ((0x20000000200000L & l) != 0L && kind > 126)
							kind = 126;
						break;
					case 65:
						if ((0x100000001000000L & l) != 0L)
							jjCheckNAdd(66);
						break;
					case 66:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(60, 62);
						break;
					case 67:
						if ((0x100000001000L & l) != 0L && kind > 127)
							kind = 127;
						break;
					case 68:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 67;
						break;
					case 69:
						if ((0x20000000200000L & l) != 0L && kind > 127)
							kind = 127;
						break;
					case 70:
						if ((0x100000001000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 69;
						break;
					case 77:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(78, 79);
						break;
					case 80:
						if ((0x104000001040L & l) != 0L && kind > 129)
							kind = 129;
						break;
					case 81:
						if (curChar == 76)
							jjAddStates(66, 67);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 7:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjstateSet[jjnewStateCnt++] = 8;
						break;
					case 20:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjAddStates(6, 8);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 82 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static private final int jjMoveStringLiteralDfa0_1() {
		switch (curChar) {
		case 10:
			return jjStopAtPos(0, 8);
		default:
			return 1;
		}
	}

	static private final int jjMoveStringLiteralDfa0_3() {
		switch (curChar) {
		case 10:
			return jjStopAtPos(0, 12);
		case 92:
			return jjMoveStringLiteralDfa1_3(0x6000L);
		default:
			return 1;
		}
	}

	static private final int jjMoveStringLiteralDfa1_3(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return 1;
		}
		switch (curChar) {
		case 10:
			if ((active0 & 0x2000L) != 0L)
				return jjStopAtPos(1, 13);
			break;
		case 13:
			return jjMoveStringLiteralDfa2_3(active0, 0x4000L);
		default:
			return 2;
		}
		return 2;
	}

	static private final int jjMoveStringLiteralDfa2_3(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return 2;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return 2;
		}
		switch (curChar) {
		case 10:
			if ((active0 & 0x4000L) != 0L)
				return jjStopAtPos(2, 14);
			break;
		default:
			return 3;
		}
		return 3;
	}

	static private final int jjMoveStringLiteralDfa0_2() {
		switch (curChar) {
		case 42:
			return jjMoveStringLiteralDfa1_2(0x400L);
		default:
			return 1;
		}
	}

	static private final int jjMoveStringLiteralDfa1_2(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return 1;
		}
		switch (curChar) {
		case 47:
			if ((active0 & 0x400L) != 0L)
				return jjStopAtPos(1, 10);
			break;
		default:
			return 2;
		}
		return 2;
	}

	static final int[] jjnextStates = { 72, 73, 75, 0, 76, 77, 20, 21, 23, 7,
			9, 46, 47, 48, 49, 50, 51, 53, 55, 57, 59, 62, 65, 35, 36, 37, 38,
			39, 40, 42, 44, 1, 2, 5, 16, 18, 20, 21, 25, 23, 20, 21, 27, 23,
			29, 31, 20, 21, 30, 23, 40, 42, 44, 51, 53, 55, 60, 61, 63, 64, 66,
			68, 70, 74, 2, 5, 6, 19, 3, 4, 10, 11, 13, 15, 22, 24, 26, 28, 78,
			79, };
	public static final String[] jjstrLiteralImages = { "", null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, "\173", "\175", "\133", "\135", "\50", "\51", "\72\72",
			"\72", "\73", "\54", "\77", "\56\56\56", "\75", "\52\75", "\57\75",
			"\45\75", "\53\75", "\55\75", "\74\74\75", "\76\76\75", "\46\75",
			"\136\75", "\174\75", "\174\174", "\46\46", "\174", "\136", "\46",
			"\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", "\74\74",
			"\76\76", "\53", "\55", "\52", "\57", "\45", "\53\53", "\55\55",
			"\176", "\41", "\56", "\55\76", "\56\52", "\55\76\52",
			"\141\165\164\157", "\142\162\145\141\153", "\143\141\163\145",
			"\143\141\164\143\150", "\143\150\141\162", "\143\157\156\163\164",
			"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164",
			"\144\145\154\145\164\145", "\144\157", "\144\157\165\142\154\145",
			"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\162\156",
			"\146\154\157\141\164", "\146\157\162", "\146\162\151\145\156\144",
			"\147\157\164\157", "\151\146", "\151\156\154\151\156\145",
			"\151\156\164", "\154\157\156\147", "\156\145\167",
			"\160\162\151\166\141\164\145",
			"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143",
			"\162\145\144\145\143\154\141\162\145\144",
			"\162\145\147\151\163\164\145\162", "\162\145\164\165\162\156",
			"\163\150\157\162\164", "\163\151\147\156\145\144",
			"\163\151\172\145\157\146", "\163\164\141\164\151\143",
			"\163\164\162\165\143\164", "\143\154\141\163\163",
			"\163\167\151\164\143\150", "\164\145\155\160\154\141\164\145",
			"\164\150\151\163", "\164\162\171", "\164\171\160\145\144\145\146",
			"\165\156\151\157\156", "\165\156\163\151\147\156\145\144",
			"\166\151\162\164\165\141\154", "\142\157\157\154",
			"\166\157\151\144", "\166\157\154\141\164\151\154\145",
			"\167\150\151\154\145", "\157\160\145\162\141\164\157\162",
			"\164\162\165\145", "\146\141\154\163\145", "\164\150\162\157\167",
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, "\146\151\156\141\154\154\171", };
	public static final String[] lexStateNames = { "DEFAULT",
			"IN_LINE_COMMENT", "IN_COMMENT", "PREPROCESSOR_OUTPUT", };
	public static final int[] jjnewLexState = { -1, -1, -1, -1, -1, 1, 2, 3, 0,
			-1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ,-1,-1};
	static final long[] jjtoToken = { 0xffffffffffff0001L, 0xffffffffffffffffL,
			0x3fL, };
	static final long[] jjtoSkip = { 0x15feL, 0x0L, 0x0L, };
	static final long[] jjtoMore = { 0xea00L, 0x0L, 0x0L, };
	static protected SimpleCharStream input_stream;
	static private final int[] jjrounds = new int[82];
	static private final int[] jjstateSet = new int[164];
	static StringBuffer image;
	static int jjimageLen;
	static int lengthOfMatch;
	static protected char curChar;

	public CPPParserTokenManager(SimpleCharStream stream) {
		if (input_stream != null)
			throw new TokenMgrError(
					"ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
					TokenMgrError.STATIC_LEXER_ERROR);
		input_stream = stream;
	}

	public CPPParserTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	static public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	static private final void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 82; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	static public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	static public void SwitchTo(int lexState) {
		if (lexState >= 4 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : "
					+ lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	static protected Token jjFillToken() {
		Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		String im = jjstrLiteralImages[jjmatchedKind];
		t.image = (im == null) ? input_stream.GetImage() : im;
		t.beginLine = input_stream.getBeginLine();
		t.beginColumn = input_stream.getBeginColumn();
		t.endLine = input_stream.getEndLine();
		t.endColumn = input_stream.getEndColumn();
		return t;
	}

	static int curLexState = 0;
	static int defaultLexState = 0;
	static int jjnewStateCnt;
	static int jjround;
	static int jjmatchedPos;
	static int jjmatchedKind;
	static public int lineNo = 0;

	static private boolean willEndNext;
	static private boolean isNextNow;
	static private int lexStateBeforeNewVersionToken;

	public static Token getNextToken() {
		int kind;
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}
			image = null;
			jjimageLen = 0;

			for (;;) {
				switch (curLexState) {
				case 0:
					try {
						input_stream.backup(0);
						while (curChar <= 32
								&& (0x100000200L & (1L << curChar)) != 0L)
							curChar = input_stream.BeginToken();
					} catch (java.io.IOException e1) {
						continue EOFLoop;
					}
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_0();
					break;
				case 1:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_1();
					if (jjmatchedPos == 0 && jjmatchedKind > 9) {
						jjmatchedKind = 9;
					}
					break;
				case 2:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_2();
					if (jjmatchedPos == 0 && jjmatchedKind > 11) {
						jjmatchedKind = 11;
					}
					break;
				case 3:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_3();
					if (jjmatchedPos == 0 && jjmatchedKind > 15) {
						jjmatchedKind = 15;
					}
					break;
				case 4:
					setJJMatchedKindForNewVersionToken();// NEW VERSION
					// TOKENS
				}

				if (jjmatchedKind != 0x7fffffff) {
					if (jjmatchedPos + 1 < curPos)
						input_stream.backup(curPos - jjmatchedPos - 1);

					if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						// if'e giris :jjmatchedKind=85, 24(;), 109, 132, 20(()
						// if'e girmeyis :jjmatchedKind=5, 9, 8, 3, 11, 10, 15,
						// 12, 6, 7
						matchedToken = jjFillToken();

						checkNewKindTokens(matchedToken);

						// NEW VERSION TOKENS START
						if (isNewVersionToken(matchedToken.image)
								|| curLexState == 4) {
							SkipLexicalActions(null);
							lexStateBeforeNewVersionToken = curLexState;
							curLexState = 4;
							continue EOFLoop;
						}
						// NEW VERSION TOKENS END

						if (jjnewLexState[jjmatchedKind] != -1)
							curLexState = jjnewLexState[jjmatchedKind];
						return matchedToken;
					} else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						// if'e giris :jjmatchedKind=12, 5, 8, 3, 10, 6, 7
						// if'e girmeyis :jjmatchedKind=15, 9, 11
						SkipLexicalActions(null);
						if (jjnewLexState[jjmatchedKind] != -1)
							curLexState = jjnewLexState[jjmatchedKind];
						continue EOFLoop;
						// this if means forget this line??
					}
					jjimageLen += jjmatchedPos + 1;
					if (jjnewLexState[jjmatchedKind] != -1)
						curLexState = jjnewLexState[jjmatchedKind];
					curPos = 0;
					jjmatchedKind = 0x7fffffff;
					try {
						curChar = input_stream.readChar();

						// /NEW VERSION TOKENS START
						if (curLexState == 4) {
							if (!willEndNext) {
								willEndNext = willNewVersionTokenEnd(curChar);
							}
							if (!willEndNext) {
								isNextNow = false;
							}
							if (isNewVersionTokenEnded(curChar)
									|| (willEndNext && isNextNow)) {
								willEndNext = false;
								curLexState = lexStateBeforeNewVersionToken;
							}
							isNextNow = willEndNext;
						}
						// /NEW VERSION TOKENS END

						continue;
					} catch (java.io.IOException e1) {
					}
				}
				int error_line = input_stream.getEndLine();
				int error_column = input_stream.getEndColumn();
				String error_after = null;
				boolean EOFSeen = false;
				try {
					input_stream.readChar();
					input_stream.backup(1);
				} catch (java.io.IOException e1) {
					EOFSeen = true;
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
					if (curChar == '\n' || curChar == '\r') {
						error_line++;
						error_column = 0;
					} else
						error_column++;
				}
				if (!EOFSeen) {
					input_stream.backup(1);
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
				}
				throw new TokenMgrError(EOFSeen, curLexState, error_line,
						error_column, error_after, curChar,
						TokenMgrError.LEXICAL_ERROR);
			}
		}
	}

	static void SkipLexicalActions(Token matchedToken) {
		switch (jjmatchedKind) {
		case 3:
			if (image == null)
				image = new StringBuffer();
			image.append(input_stream.GetSuffix(jjimageLen
					+ (lengthOfMatch = jjmatchedPos + 1)));
			lineNo++;
			break;
		case 4:
			if (image == null)
				image = new StringBuffer();
			image.append(input_stream.GetSuffix(jjimageLen
					+ (lengthOfMatch = jjmatchedPos + 1)));
			lineNo++;
			break;
		default:
			break;
		}
	}

	
	//Asagisi Caner'den -- Below by Caner
	// NEW VERSION TOKENS LIKE "USING NAMESPACE"
	static int storedJjmatchedKindOfNewVersionToken;

	static boolean isNewVersionToken(String token) {

		if (token.equalsIgnoreCase("using")) {
			storedJjmatchedKindOfNewVersionToken = USING;
			return true;
		}
		if (token.equalsIgnoreCase("static_cast")) {
			storedJjmatchedKindOfNewVersionToken = STATIC_CAST;
			return true;
		}
		if (token.equalsIgnoreCase("const_cast")) {
			storedJjmatchedKindOfNewVersionToken = CONST_CAST;
			return true;
		}
		if (token.equalsIgnoreCase("reinterpret_cast")) {
			storedJjmatchedKindOfNewVersionToken = REINTERPRET_CAST;
			return true;
		}
		
		if (token.equalsIgnoreCase("ostream")) {
			storedJjmatchedKindOfNewVersionToken = OSTREAM;
			return true;
		}
		
//		if (token.equalsIgnoreCase("OFDNSTREAMBUF")) {
//			storedJjmatchedKindOfNewVersionToken = OFDNSTREAMBUF;
//			return true;
//		}
		
//		if (token.equalsIgnoreCase("template")) {
//			storedJjmatchedKindOfNewVersionToken = TYPENAME;
//			return true;
//		}

		return false;
	}

	static void setJJMatchedKindForNewVersionToken() {
		jjmatchedKind = storedJjmatchedKindOfNewVersionToken;
	}

	static boolean isNewVersionTokenEnded(char c) {//***gosterilen char haric tutulur***
		if (storedJjmatchedKindOfNewVersionToken == USING && c == ';') {// USING ends 
			// bu dahil olsa daha dogru olur 
			//ama ornek olmasi icin burada(bi sakincasi yok)
			return true;
		}

		return false;
	}

	static boolean willNewVersionTokenEnd(char c) {//***gosterilen char dahil tutulur***

		if (storedJjmatchedKindOfNewVersionToken == STATIC_CAST && c == '>') {
			return true;
		}
		
		if (storedJjmatchedKindOfNewVersionToken == CONST_CAST && c == '>') {
			return true;
		}
		
		if (storedJjmatchedKindOfNewVersionToken == REINTERPRET_CAST && c == '>') {
			return true;
		}
		
		if (storedJjmatchedKindOfNewVersionToken == OSTREAM && c == ' ') {
			return true;
		}
		
//		if (storedJjmatchedKindOfNewVersionToken == OFDNSTREAMBUF && c == ' ') {
//			return true;
//		}

		return false;
	}

	private static void checkNewKindTokens(Token matchedToken) {
		String token = matchedToken.image;
//DIKKAT: eger yeni bir tane daha eklenirse
		//jj_3R_62_isPrimitiveType()'ta da degisiklik yapilacak 
		if (token.equalsIgnoreCase("size_t")) {
			matchedToken.kind = SIZE_T;
		} else if (token.equalsIgnoreCase("time_t")) {
			matchedToken.kind = TIME_T;
		} else if (token.equalsIgnoreCase("PTRDIFF_T")) {
			matchedToken.kind = PTRDIFF_T;
		} else if (token.equalsIgnoreCase("PTRDIFF_T")) {
			matchedToken.kind = DWORD_PTR;
		} else if (token.equalsIgnoreCase("LONG_PTR")) {
			matchedToken.kind = LONG_PTR;
		} else if (token.equalsIgnoreCase("typename")) {
			matchedToken.kind = TYPENAME;
		}

	}
}
