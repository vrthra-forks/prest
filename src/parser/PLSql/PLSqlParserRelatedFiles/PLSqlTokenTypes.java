// $ANTLR 2.7.5 (20050128): "PLSQLGrammar.g" -> "PLSqlParser.java"$
package parser.PLSql.PLSqlParserRelatedFiles;
import antlr.CommonToken;

public interface PLSqlTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int START_RULE = 4;
	int CREATE_PACKAGE = 5;
	int PACKAGE_SPEC = 6;
	int PACKAGE_BODY = 7;
	int PACKAGE_OBJ_BODY = 8;
	int SELECT_EXPRESSION = 9;
	int PLSQL_BLOCK = 10;
	int CURSOR_DECLARATION = 11;
	int PROCEDURE_BODY = 12;
	int FUNCTION_BODY = 13;
	int PARAMETER_SPEC = 14;
	int SQL_STATEMENT = 15;
	int IF_STATEMENT = 16;
	int LOOP_STATEMENT = 17;
	int STATEMENT = 18;
	int SELECT_COMMAND = 19;
	int SELECT_LIST = 20;
	int TABLE_REFERENCE_LIST = 21;
	int WHERE_CONDITION = 22;
	int SUBQUERY = 23;
	int SQL_IDENTIFIER = 24;
	int SQL_LITERAL = 25;
	int FUNCTION = 26;
	int GROUP_FUNCTION = 27;
	int USER_FUNCTION = 28;
	int MULTIPLY = 29;
	int ARGUMENT = 30;
	int DIVIDE = 31;
	int LITERAL_set = 32;
	int LITERAL_show = 33;
	int SEMI = 34;
	int LITERAL_create = 35;
	int LITERAL_or = 36;
	int LITERAL_replace = 37;
	int LITERAL_package = 38;
	int LITERAL_authid = 39;
	int LITERAL_is = 40;
	int LITERAL_as = 41;
	int LITERAL_end = 42;
	int LITERAL_body = 43;
	int DOT = 44;
	int LITERAL_language = 45;
	int LITERAL_java = 46;
	int LITERAL_name = 47;
	int LITERAL_constant = 48;
	int LITERAL_not = 49;
	int LITERAL_null = 50;
	int ASSIGNMENT_EQ = 51;
	int LITERAL_default = 52;
	int LITERAL_subtype = 53;
	int LITERAL_cursor = 54;
	int OPEN_PAREN = 55;
	int COMMA = 56;
	int CLOSE_PAREN = 57;
	int START_LABEL = 58;
	int END_LABEL = 59;
	int LITERAL_begin = 60;
	// "declare " = 61
	int LITERAL_loop = 62;
	int LITERAL_for = 63;
	int LITERAL_while = 64;
	int LITERAL_forall = 65;
	int LITERAL_if = 66;
	int LITERAL_goto = 67;
	int LITERAL_raise = 68;
	int LITERAL_exit = 69;
	int LITERAL_return = 70;
	int LITERAL_with = 71;
	int LITERAL_select = 72;
	int LITERAL_update = 73;
	int LITERAL_insert = 74;
	int LITERAL_delete = 75;
	int LITERAL_alter = 76;
	int LITERAL_lock = 77;
	int LITERAL_grant = 78;
	int LITERAL_execute = 79;
	int LITERAL_commit = 80;
	int LITERAL_rollback = 81;
	int LITERAL_open = 82;
	int LITERAL_fetch = 83;
	int LITERAL_close = 84;
	int LITERAL_first = 85;
	int LITERAL_last = 86;
	int COLON = 87;
	int LITERAL_when = 88;
	int LITERAL_binary_integer = 89;
	int LITERAL_natural = 90;
	int LITERAL_positive = 91;
	int LITERAL_number = 92;
	int NUMBER = 93;
	int LITERAL_char = 94;
	int LITERAL_long = 95;
	int LITERAL_raw = 96;
	int LITERAL_boolean = 97;
	int LITERAL_date = 98;
	int LITERAL_smallint = 99;
	int LITERAL_real = 100;
	int LITERAL_numeric = 101;
	int LITERAL_int = 102;
	int LITERAL_integer = 103;
	// "double precision" = 104
	int LITERAL_decimal = 105;
	// "varchar2" = 106
	int LITERAL_varchar = 107;
	int LITERAL_character = 108;
	int LITERAL_mlslabel = 109;
	int PERCENTAGE = 110;
	int LITERAL_type = 111;
	int LITERAL_rowtype = 112;
	int LITERAL_in = 113;
	int LITERAL_out = 114;
	int LITERAL_exception = 115;
	int LITERAL_pragma = 116;
	int LITERAL_exception_init = 117;
	int PLUS = 118;
	int MINUS = 119;
	int LITERAL_record = 120;
	int LITERAL_ref = 121;
	int LITERAL_varray = 122;
	int LITERAL_of = 123;
	int LITERAL_table = 124;
	int LITERAL_index = 125;
	int LITERAL_by = 126;
	int LITERAL_procedure = 127;
	int LITERAL_declare = 128;
	int LITERAL_then = 129;
	int LITERAL_function = 130;
	int OUTER_JOIN = 131;
	int DOUBLEDOT = 132;
	int LITERAL_and = 133;
	int LITERAL_like = 134;
	int LITERAL_between = 135;
	int LITERAL_notfound = 136;
	int LITERAL_found = 137;
	int LITERAL_isopen = 138;
	int LITERAL_true = 139;
	int LITERAL_false = 140;
	int LITERAL_reverse = 141;
	int ASTERISK = 142;
	// "**" = 143
	int CONCAT = 144;
	int LITERAL_cast = 145;
	int LITERAL_trim = 146;
	int LITERAL_count = 147;
	int LITERAL_case = 148;
	int LITERAL_all = 149;
	int LITERAL_any = 150;
	// "%rowcount" = 151
	int LITERAL_distinct = 152;
	int QUOTED_STRING = 153;
	int LITERAL_work = 154;
	int LITERAL_else = 155;
	int LITERAL_elsif = 156;
	int LITERAL_immediate = 157;
	int LITERAL_bulk = 158;
	int LITERAL_collect = 159;
	int LITERAL_into = 160;
	int LITERAL_using = 161;
	int LITERAL_system = 162;
	int LITERAL_session = 163;
	int LITERAL_flush = 164;
	int LITERAL_shared_pool = 165;
	int EQ = 166;
	int LITERAL_reset = 167;
	int LITERAL_sid = 168;
	int LITERAL_union = 169;
	int LITERAL_intersect = 170;
	int LITERAL_minus = 171;
	int LITERAL_from = 172;
	int LITERAL_left = 173;
	int LITERAL_right = 174;
	int LITERAL_inner = 175;
	int LITERAL_where = 176;
	int PASS_BY_NAME = 177;
	int LITERAL_abs = 178;
	int LITERAL_ascii = 179;
	int LITERAL_ceil = 180;
	int LITERAL_floor = 181;
	int LITERAL_instr = 182;
	int LITERAL_length = 183;
	int LITERAL_mod = 184;
	int LITERAL_power = 185;
	int LITERAL_round = 186;
	int LITERAL_sign = 187;
	int LITERAL_sqrt = 188;
	int LITERAL_trunc = 189;
	int LITERAL_chr = 190;
	int LITERAL_concat = 191;
	int LITERAL_initcap = 192;
	int LITERAL_lower = 193;
	int LITERAL_lpad = 194;
	int LITERAL_ltrim = 195;
	int LITERAL_rpad = 196;
	int LITERAL_rtrim = 197;
	int LITERAL_soundex = 198;
	int LITERAL_substr = 199;
	int LITERAL_translate = 200;
	int LITERAL_upper = 201;
	int LITERAL_avg = 202;
	int LITERAL_max = 203;
	int LITERAL_min = 204;
	int LITERAL_stddev = 205;
	int LITERAL_sum = 206;
	int LITERAL_variance = 207;
	int LITERAL_chartorowid = 208;
	int LITERAL_convert = 209;
	int LITERAL_hextoraw = 210;
	int LITERAL_rawtohex = 211;
	int LITERAL_rowidtochar = 212;
	int LITERAL_to_char = 213;
	int LITERAL_to_date = 214;
	int LITERAL_to_number = 215;
	int LITERAL_decode = 216;
	int LITERAL_dump = 217;
	int LITERAL_greatest = 218;
	int LITERAL_least = 219;
	int LITERAL_nvl = 220;
	int LITERAL_uid = 221;
	int LITERAL_userenv = 222;
	int LITERAL_vsize = 223;
	int LITERAL_leading = 224;
	int LITERAL_trailing = 225;
	int LITERAL_both = 226;
	int LITERAL_user = 227;
	int LITERAL_sysdate = 228;
	int LITERAL_the = 229;
	// "left " = 230
	int LITERAL_outer = 231;
	int LITERAL_join = 232;
	int LITERAL_on = 233;
	int AT_SIGN = 234;
	int LITERAL_exists = 235;
	int LITERAL_escape = 236;
	int LITERAL_prior = 237;
	int LT = 238;
	int GT = 239;
	int NOT_EQ = 240;
	int LE = 241;
	int GE = 242;
	int LITERAL_start = 243;
	int LITERAL_connect = 244;
	int LITERAL_group = 245;
	int LITERAL_having = 246;
	int LITERAL_order = 247;
	int LITERAL_asc = 248;
	int LITERAL_desc = 249;
	int LITERAL_nowait = 250;
	int LITERAL_values = 251;
	int LITERAL_transaction = 252;
	int LITERAL_read = 253;
	int LITERAL_only = 254;
	int LITERAL_mode = 255;
	int LITERAL_row = 256;
	int LITERAL_share = 257;
	int LITERAL_exclusive = 258;
	int LITERAL_to = 259;
	int LITERAL_savepoint = 260;
	int LITERAL_comment = 261;
	int IDENTIFIER = 262;
	int DOUBLE_QUOTED_STRING = 263;
	int ANY_CHARACTER = 264;
	int VERTBAR = 265;
	int N = 266;
	int WS = 267;
	int SL_COMMENT = 268;
	int ML_COMMENT = 269;
}
